// Copyright 2025 HEALTH-X dataLOFT
//
// Licensed under the European Union Public Licence, Version 1.2 (the
// "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://eupl.eu/1.2/en/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by mockery v2.52.1. DO NOT EDIT.

package types

import (
	context "context"

	types "github.com/HEALTH-X-dataLOFT/cma-backend/pkg/server/api/types"
	mock "github.com/stretchr/testify/mock"
)

// MockShareManager is an autogenerated mock type for the ShareManager type
type MockShareManager struct {
	mock.Mock
}

type MockShareManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockShareManager) EXPECT() *MockShareManager_Expecter {
	return &MockShareManager_Expecter{mock: &_m.Mock}
}

// SubmitShare provides a mock function with given fields: ctx, share
func (_m *MockShareManager) SubmitShare(ctx context.Context, share types.ShareRequest) (types.ShareResponse, error) {
	ret := _m.Called(ctx, share)

	if len(ret) == 0 {
		panic("no return value specified for SubmitShare")
	}

	var r0 types.ShareResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ShareRequest) (types.ShareResponse, error)); ok {
		return rf(ctx, share)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.ShareRequest) types.ShareResponse); ok {
		r0 = rf(ctx, share)
	} else {
		r0 = ret.Get(0).(types.ShareResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.ShareRequest) error); ok {
		r1 = rf(ctx, share)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockShareManager_SubmitShare_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubmitShare'
type MockShareManager_SubmitShare_Call struct {
	*mock.Call
}

// SubmitShare is a helper method to define mock.On call
//   - ctx context.Context
//   - share types.ShareRequest
func (_e *MockShareManager_Expecter) SubmitShare(ctx interface{}, share interface{}) *MockShareManager_SubmitShare_Call {
	return &MockShareManager_SubmitShare_Call{Call: _e.mock.On("SubmitShare", ctx, share)}
}

func (_c *MockShareManager_SubmitShare_Call) Run(run func(ctx context.Context, share types.ShareRequest)) *MockShareManager_SubmitShare_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.ShareRequest))
	})
	return _c
}

func (_c *MockShareManager_SubmitShare_Call) Return(_a0 types.ShareResponse, _a1 error) *MockShareManager_SubmitShare_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockShareManager_SubmitShare_Call) RunAndReturn(run func(context.Context, types.ShareRequest) (types.ShareResponse, error)) *MockShareManager_SubmitShare_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockShareManager creates a new instance of MockShareManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockShareManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockShareManager {
	mock := &MockShareManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
