// Copyright 2025 HEALTH-X dataLOFT
//
// Licensed under the European Union Public Licence, Version 1.2 (the
// "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://eupl.eu/1.2/en/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by mockery v2.52.1. DO NOT EDIT.

package types

import (
	context "context"

	types "github.com/HEALTH-X-dataLOFT/cma-backend/pkg/server/api/types"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockStudyLister is an autogenerated mock type for the StudyLister type
type MockStudyLister struct {
	mock.Mock
}

type MockStudyLister_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStudyLister) EXPECT() *MockStudyLister_Expecter {
	return &MockStudyLister_Expecter{mock: &_m.Mock}
}

// GetStudy provides a mock function with given fields: ctx, studyID
func (_m *MockStudyLister) GetStudy(ctx context.Context, studyID uuid.UUID) (types.Study, error) {
	ret := _m.Called(ctx, studyID)

	if len(ret) == 0 {
		panic("no return value specified for GetStudy")
	}

	var r0 types.Study
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (types.Study, error)); ok {
		return rf(ctx, studyID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) types.Study); ok {
		r0 = rf(ctx, studyID)
	} else {
		r0 = ret.Get(0).(types.Study)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, studyID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStudyLister_GetStudy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStudy'
type MockStudyLister_GetStudy_Call struct {
	*mock.Call
}

// GetStudy is a helper method to define mock.On call
//   - ctx context.Context
//   - studyID uuid.UUID
func (_e *MockStudyLister_Expecter) GetStudy(ctx interface{}, studyID interface{}) *MockStudyLister_GetStudy_Call {
	return &MockStudyLister_GetStudy_Call{Call: _e.mock.On("GetStudy", ctx, studyID)}
}

func (_c *MockStudyLister_GetStudy_Call) Run(run func(ctx context.Context, studyID uuid.UUID)) *MockStudyLister_GetStudy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStudyLister_GetStudy_Call) Return(_a0 types.Study, _a1 error) *MockStudyLister_GetStudy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStudyLister_GetStudy_Call) RunAndReturn(run func(context.Context, uuid.UUID) (types.Study, error)) *MockStudyLister_GetStudy_Call {
	_c.Call.Return(run)
	return _c
}

// ListStudies provides a mock function with given fields: ctx
func (_m *MockStudyLister) ListStudies(ctx context.Context) ([]types.Study, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListStudies")
	}

	var r0 []types.Study
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]types.Study, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []types.Study); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Study)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStudyLister_ListStudies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStudies'
type MockStudyLister_ListStudies_Call struct {
	*mock.Call
}

// ListStudies is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStudyLister_Expecter) ListStudies(ctx interface{}) *MockStudyLister_ListStudies_Call {
	return &MockStudyLister_ListStudies_Call{Call: _e.mock.On("ListStudies", ctx)}
}

func (_c *MockStudyLister_ListStudies_Call) Run(run func(ctx context.Context)) *MockStudyLister_ListStudies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockStudyLister_ListStudies_Call) Return(_a0 []types.Study, _a1 error) *MockStudyLister_ListStudies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStudyLister_ListStudies_Call) RunAndReturn(run func(context.Context) ([]types.Study, error)) *MockStudyLister_ListStudies_Call {
	_c.Call.Return(run)
	return _c
}

// ListStudyFiles provides a mock function with given fields: ctx, studyID
func (_m *MockStudyLister) ListStudyFiles(ctx context.Context, studyID uuid.UUID) ([]types.ProviderFile, error) {
	ret := _m.Called(ctx, studyID)

	if len(ret) == 0 {
		panic("no return value specified for ListStudyFiles")
	}

	var r0 []types.ProviderFile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]types.ProviderFile, error)); ok {
		return rf(ctx, studyID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []types.ProviderFile); ok {
		r0 = rf(ctx, studyID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.ProviderFile)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, studyID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStudyLister_ListStudyFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStudyFiles'
type MockStudyLister_ListStudyFiles_Call struct {
	*mock.Call
}

// ListStudyFiles is a helper method to define mock.On call
//   - ctx context.Context
//   - studyID uuid.UUID
func (_e *MockStudyLister_Expecter) ListStudyFiles(ctx interface{}, studyID interface{}) *MockStudyLister_ListStudyFiles_Call {
	return &MockStudyLister_ListStudyFiles_Call{Call: _e.mock.On("ListStudyFiles", ctx, studyID)}
}

func (_c *MockStudyLister_ListStudyFiles_Call) Run(run func(ctx context.Context, studyID uuid.UUID)) *MockStudyLister_ListStudyFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStudyLister_ListStudyFiles_Call) Return(_a0 []types.ProviderFile, _a1 error) *MockStudyLister_ListStudyFiles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStudyLister_ListStudyFiles_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]types.ProviderFile, error)) *MockStudyLister_ListStudyFiles_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStudyLister creates a new instance of MockStudyLister. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStudyLister(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStudyLister {
	mock := &MockStudyLister{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
