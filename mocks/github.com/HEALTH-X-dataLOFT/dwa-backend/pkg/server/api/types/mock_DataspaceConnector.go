// Copyright 2025 HEALTH-X dataLOFT
//
// Licensed under the European Union Public Licence, Version 1.2 (the
// "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://eupl.eu/1.2/en/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by mockery v2.52.1. DO NOT EDIT.

package types

import (
	context "context"

	types "github.com/HEALTH-X-dataLOFT/cma-backend/pkg/server/api/types"
	mock "github.com/stretchr/testify/mock"
)

// MockDataspaceConnector is an autogenerated mock type for the DataspaceConnector type
type MockDataspaceConnector struct {
	mock.Mock
}

type MockDataspaceConnector_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDataspaceConnector) EXPECT() *MockDataspaceConnector_Expecter {
	return &MockDataspaceConnector_Expecter{mock: &_m.Mock}
}

// GetDownloadCredentials provides a mock function with given fields: ctx, providerID, fileID
func (_m *MockDataspaceConnector) GetDownloadCredentials(ctx context.Context, providerID string, fileID string) (types.DownloadCredentials, error) {
	ret := _m.Called(ctx, providerID, fileID)

	if len(ret) == 0 {
		panic("no return value specified for GetDownloadCredentials")
	}

	var r0 types.DownloadCredentials
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (types.DownloadCredentials, error)); ok {
		return rf(ctx, providerID, fileID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) types.DownloadCredentials); ok {
		r0 = rf(ctx, providerID, fileID)
	} else {
		r0 = ret.Get(0).(types.DownloadCredentials)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, providerID, fileID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataspaceConnector_GetDownloadCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDownloadCredentials'
type MockDataspaceConnector_GetDownloadCredentials_Call struct {
	*mock.Call
}

// GetDownloadCredentials is a helper method to define mock.On call
//   - ctx context.Context
//   - providerID string
//   - fileID string
func (_e *MockDataspaceConnector_Expecter) GetDownloadCredentials(ctx interface{}, providerID interface{}, fileID interface{}) *MockDataspaceConnector_GetDownloadCredentials_Call {
	return &MockDataspaceConnector_GetDownloadCredentials_Call{Call: _e.mock.On("GetDownloadCredentials", ctx, providerID, fileID)}
}

func (_c *MockDataspaceConnector_GetDownloadCredentials_Call) Run(run func(ctx context.Context, providerID string, fileID string)) *MockDataspaceConnector_GetDownloadCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockDataspaceConnector_GetDownloadCredentials_Call) Return(_a0 types.DownloadCredentials, _a1 error) *MockDataspaceConnector_GetDownloadCredentials_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataspaceConnector_GetDownloadCredentials_Call) RunAndReturn(run func(context.Context, string, string) (types.DownloadCredentials, error)) *MockDataspaceConnector_GetDownloadCredentials_Call {
	_c.Call.Return(run)
	return _c
}

// GetProviderFile provides a mock function with given fields: ctx, providerID, fileID
func (_m *MockDataspaceConnector) GetProviderFile(ctx context.Context, providerID string, fileID string) ([]byte, error) {
	ret := _m.Called(ctx, providerID, fileID)

	if len(ret) == 0 {
		panic("no return value specified for GetProviderFile")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]byte, error)); ok {
		return rf(ctx, providerID, fileID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []byte); ok {
		r0 = rf(ctx, providerID, fileID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, providerID, fileID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataspaceConnector_GetProviderFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProviderFile'
type MockDataspaceConnector_GetProviderFile_Call struct {
	*mock.Call
}

// GetProviderFile is a helper method to define mock.On call
//   - ctx context.Context
//   - providerID string
//   - fileID string
func (_e *MockDataspaceConnector_Expecter) GetProviderFile(ctx interface{}, providerID interface{}, fileID interface{}) *MockDataspaceConnector_GetProviderFile_Call {
	return &MockDataspaceConnector_GetProviderFile_Call{Call: _e.mock.On("GetProviderFile", ctx, providerID, fileID)}
}

func (_c *MockDataspaceConnector_GetProviderFile_Call) Run(run func(ctx context.Context, providerID string, fileID string)) *MockDataspaceConnector_GetProviderFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockDataspaceConnector_GetProviderFile_Call) Return(_a0 []byte, _a1 error) *MockDataspaceConnector_GetProviderFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataspaceConnector_GetProviderFile_Call) RunAndReturn(run func(context.Context, string, string) ([]byte, error)) *MockDataspaceConnector_GetProviderFile_Call {
	_c.Call.Return(run)
	return _c
}

// GetProviderFileInfo provides a mock function with given fields: ctx, providerID, fileID
func (_m *MockDataspaceConnector) GetProviderFileInfo(ctx context.Context, providerID string, fileID string) (types.ProviderFile, error) {
	ret := _m.Called(ctx, providerID, fileID)

	if len(ret) == 0 {
		panic("no return value specified for GetProviderFileInfo")
	}

	var r0 types.ProviderFile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (types.ProviderFile, error)); ok {
		return rf(ctx, providerID, fileID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) types.ProviderFile); ok {
		r0 = rf(ctx, providerID, fileID)
	} else {
		r0 = ret.Get(0).(types.ProviderFile)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, providerID, fileID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataspaceConnector_GetProviderFileInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProviderFileInfo'
type MockDataspaceConnector_GetProviderFileInfo_Call struct {
	*mock.Call
}

// GetProviderFileInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - providerID string
//   - fileID string
func (_e *MockDataspaceConnector_Expecter) GetProviderFileInfo(ctx interface{}, providerID interface{}, fileID interface{}) *MockDataspaceConnector_GetProviderFileInfo_Call {
	return &MockDataspaceConnector_GetProviderFileInfo_Call{Call: _e.mock.On("GetProviderFileInfo", ctx, providerID, fileID)}
}

func (_c *MockDataspaceConnector_GetProviderFileInfo_Call) Run(run func(ctx context.Context, providerID string, fileID string)) *MockDataspaceConnector_GetProviderFileInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockDataspaceConnector_GetProviderFileInfo_Call) Return(_a0 types.ProviderFile, _a1 error) *MockDataspaceConnector_GetProviderFileInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataspaceConnector_GetProviderFileInfo_Call) RunAndReturn(run func(context.Context, string, string) (types.ProviderFile, error)) *MockDataspaceConnector_GetProviderFileInfo_Call {
	_c.Call.Return(run)
	return _c
}

// ListProviderFiles provides a mock function with given fields: ctx, providerID
func (_m *MockDataspaceConnector) ListProviderFiles(ctx context.Context, providerID string) ([]types.ProviderFile, error) {
	ret := _m.Called(ctx, providerID)

	if len(ret) == 0 {
		panic("no return value specified for ListProviderFiles")
	}

	var r0 []types.ProviderFile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]types.ProviderFile, error)); ok {
		return rf(ctx, providerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []types.ProviderFile); ok {
		r0 = rf(ctx, providerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.ProviderFile)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, providerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataspaceConnector_ListProviderFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProviderFiles'
type MockDataspaceConnector_ListProviderFiles_Call struct {
	*mock.Call
}

// ListProviderFiles is a helper method to define mock.On call
//   - ctx context.Context
//   - providerID string
func (_e *MockDataspaceConnector_Expecter) ListProviderFiles(ctx interface{}, providerID interface{}) *MockDataspaceConnector_ListProviderFiles_Call {
	return &MockDataspaceConnector_ListProviderFiles_Call{Call: _e.mock.On("ListProviderFiles", ctx, providerID)}
}

func (_c *MockDataspaceConnector_ListProviderFiles_Call) Run(run func(ctx context.Context, providerID string)) *MockDataspaceConnector_ListProviderFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDataspaceConnector_ListProviderFiles_Call) Return(_a0 []types.ProviderFile, _a1 error) *MockDataspaceConnector_ListProviderFiles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataspaceConnector_ListProviderFiles_Call) RunAndReturn(run func(context.Context, string) ([]types.ProviderFile, error)) *MockDataspaceConnector_ListProviderFiles_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDataspaceConnector creates a new instance of MockDataspaceConnector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDataspaceConnector(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDataspaceConnector {
	mock := &MockDataspaceConnector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
