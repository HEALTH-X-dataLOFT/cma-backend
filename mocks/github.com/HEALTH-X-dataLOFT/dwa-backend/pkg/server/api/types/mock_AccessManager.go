// Copyright 2025 HEALTH-X dataLOFT
//
// Licensed under the European Union Public Licence, Version 1.2 (the
// "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://eupl.eu/1.2/en/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by mockery v2.52.1. DO NOT EDIT.

package types

import (
	context "context"

	types "github.com/HEALTH-X-dataLOFT/cma-backend/pkg/server/api/types"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockAccessManager is an autogenerated mock type for the AccessManager type
type MockAccessManager struct {
	mock.Mock
}

type MockAccessManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccessManager) EXPECT() *MockAccessManager_Expecter {
	return &MockAccessManager_Expecter{mock: &_m.Mock}
}

// DeletePolicy provides a mock function with given fields: ctx, policyID
func (_m *MockAccessManager) DeletePolicy(ctx context.Context, policyID uuid.UUID) error {
	ret := _m.Called(ctx, policyID)

	if len(ret) == 0 {
		panic("no return value specified for DeletePolicy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, policyID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccessManager_DeletePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePolicy'
type MockAccessManager_DeletePolicy_Call struct {
	*mock.Call
}

// DeletePolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - policyID uuid.UUID
func (_e *MockAccessManager_Expecter) DeletePolicy(ctx interface{}, policyID interface{}) *MockAccessManager_DeletePolicy_Call {
	return &MockAccessManager_DeletePolicy_Call{Call: _e.mock.On("DeletePolicy", ctx, policyID)}
}

func (_c *MockAccessManager_DeletePolicy_Call) Run(run func(ctx context.Context, policyID uuid.UUID)) *MockAccessManager_DeletePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockAccessManager_DeletePolicy_Call) Return(_a0 error) *MockAccessManager_DeletePolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccessManager_DeletePolicy_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *MockAccessManager_DeletePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// ListPolicies provides a mock function with given fields: ctx
func (_m *MockAccessManager) ListPolicies(ctx context.Context) ([]types.Policy, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListPolicies")
	}

	var r0 []types.Policy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]types.Policy, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []types.Policy); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Policy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessManager_ListPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPolicies'
type MockAccessManager_ListPolicies_Call struct {
	*mock.Call
}

// ListPolicies is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAccessManager_Expecter) ListPolicies(ctx interface{}) *MockAccessManager_ListPolicies_Call {
	return &MockAccessManager_ListPolicies_Call{Call: _e.mock.On("ListPolicies", ctx)}
}

func (_c *MockAccessManager_ListPolicies_Call) Run(run func(ctx context.Context)) *MockAccessManager_ListPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAccessManager_ListPolicies_Call) Return(_a0 []types.Policy, _a1 error) *MockAccessManager_ListPolicies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessManager_ListPolicies_Call) RunAndReturn(run func(context.Context) ([]types.Policy, error)) *MockAccessManager_ListPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// SubmitPolicy provides a mock function with given fields: ctx, policy
func (_m *MockAccessManager) SubmitPolicy(ctx context.Context, policy types.Policy) error {
	ret := _m.Called(ctx, policy)

	if len(ret) == 0 {
		panic("no return value specified for SubmitPolicy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.Policy) error); ok {
		r0 = rf(ctx, policy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccessManager_SubmitPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubmitPolicy'
type MockAccessManager_SubmitPolicy_Call struct {
	*mock.Call
}

// SubmitPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - policy types.Policy
func (_e *MockAccessManager_Expecter) SubmitPolicy(ctx interface{}, policy interface{}) *MockAccessManager_SubmitPolicy_Call {
	return &MockAccessManager_SubmitPolicy_Call{Call: _e.mock.On("SubmitPolicy", ctx, policy)}
}

func (_c *MockAccessManager_SubmitPolicy_Call) Run(run func(ctx context.Context, policy types.Policy)) *MockAccessManager_SubmitPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.Policy))
	})
	return _c
}

func (_c *MockAccessManager_SubmitPolicy_Call) Return(_a0 error) *MockAccessManager_SubmitPolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccessManager_SubmitPolicy_Call) RunAndReturn(run func(context.Context, types.Policy) error) *MockAccessManager_SubmitPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccessManager creates a new instance of MockAccessManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccessManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccessManager {
	mock := &MockAccessManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
