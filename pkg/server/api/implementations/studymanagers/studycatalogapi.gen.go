// Copyright 2025 HEALTH-X dataLOFT
//
// Licensed under the European Union Public Licence, Version 1.2 (the
// "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://eupl.eu/1.2/en/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package simple provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package studymanagers

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

// Defines values for OrganizationResourceType.
const (
	OrganizationResourceTypeOrganization OrganizationResourceType = "Organization"
)

// Defines values for PlanDefinitionResourceType.
const (
	PlanDefinitionResourceTypePlanDefinition PlanDefinitionResourceType = "PlanDefinition"
)

// Defines values for PractitionerResourceType.
const (
	PractitionerResourceTypePractitioner PractitionerResourceType = "Practitioner"
)

// Defines values for Status.
const (
	Active Status = "active"
)

// Defines values for StudyResourceType.
const (
	StudyResourceTypeResearchStudy StudyResourceType = "ResearchStudy"
)

// Defines values for StudyBaseModelResourceType.
const (
	StudyBaseModelResourceTypeResearchStudy StudyBaseModelResourceType = "ResearchStudy"
)

// ActionElement defines model for ActionElement.
type ActionElement struct {
	Code   Coding          `json:"code"`
	Output []OutputElement `json:"output"`
}

// Address defines model for Address.
type Address struct {
	City       string   `json:"city"`
	Line       []string `json:"line"`
	PostalCode string   `json:"postalCode"`
}

// AddressItem defines model for AddressItem.
type AddressItem struct {
	Address Address `json:"address"`
}

// CodeFilter defines model for CodeFilter.
type CodeFilter struct {
	Code []CodingElement `json:"code"`
	Path string          `json:"path"`
}

// Coding defines model for Coding.
type Coding struct {
	Coding []CodingElement `json:"coding"`
}

// CodingElement defines model for CodingElement.
type CodingElement struct {
	Code    string  `json:"code"`
	Display *string `json:"display,omitempty"`
	System  string  `json:"system"`
}

// DateFilter defines model for DateFilter.
type DateFilter struct {
	Path        string     `json:"path"`
	ValuePeriod TimePeriod `json:"valuePeriod"`
}

// HTTPValidationError defines model for HTTPValidationError.
type HTTPValidationError struct {
	Detail *[]ValidationError `json:"detail,omitempty"`
}

// Organization defines model for Organization.
type Organization struct {
	Contact      []AddressItem            `json:"contact"`
	Id           *string                  `json:"id,omitempty"`
	Name         string                   `json:"name"`
	ResourceType OrganizationResourceType `json:"resourceType"`
}

// OrganizationResourceType defines model for Organization.ResourceType.
type OrganizationResourceType string

// OutputElement defines model for OutputElement.
type OutputElement struct {
	Requirement Requirement `json:"requirement"`
	Title       string      `json:"title"`
}

// Party defines model for Party.
type Party struct {
	Classifier []TextItem `json:"classifier"`
	Name       string     `json:"name"`
	Party      Reference  `json:"party"`
	Role       Role       `json:"role"`
}

// PlanDefinition defines model for PlanDefinition.
type PlanDefinition struct {
	Action       []ActionElement            `json:"action"`
	Id           *string                    `json:"id,omitempty"`
	ResourceType PlanDefinitionResourceType `json:"resourceType"`

	// Status An enumeration.
	Status Status `json:"status"`
}

// PlanDefinitionResourceType defines model for PlanDefinition.ResourceType.
type PlanDefinitionResourceType string

// Practitioner defines model for Practitioner.
type Practitioner struct {
	Id           *string                  `json:"id,omitempty"`
	Name         []TextItem               `json:"name"`
	ResourceType PractitionerResourceType `json:"resourceType"`
	Telecom      []TelcomItem             `json:"telecom"`
}

// PractitionerResourceType defines model for Practitioner.ResourceType.
type PractitionerResourceType string

// Reference defines model for Reference.
type Reference struct {
	Reference string `json:"reference"`
	Type      string `json:"type"`
}

// Requirement defines model for Requirement.
type Requirement struct {
	CodeFilter []CodeFilter `json:"codeFilter"`
	DateFilter []DateFilter `json:"dateFilter"`
	Type       string       `json:"type"`
}

// Role defines model for Role.
type Role struct {
	Coding []CodingElement `json:"coding"`
}

// Status An enumeration.
type Status string

// Study defines model for Study.
type Study struct {
	AssociatedParty    []Party                `json:"associatedParty"`
	Contained          []Study_Contained_Item `json:"contained"`
	Description        string                 `json:"description"`
	DescriptionSummary string                 `json:"descriptionSummary"`
	Id                 *string                `json:"id,omitempty"`
	Period             TimePeriod             `json:"period"`
	Protocol           []Reference            `json:"protocol"`
	ResourceType       *StudyResourceType     `json:"resourceType,omitempty"`

	// Status An enumeration.
	Status Status `json:"status"`
	Title  string `json:"title"`
}

// Study_Contained_Item defines model for Study.contained.Item.
type Study_Contained_Item struct {
	union json.RawMessage
}

// StudyResourceType defines model for Study.ResourceType.
type StudyResourceType string

// StudyBaseModel defines model for StudyBaseModel.
type StudyBaseModel struct {
	AssociatedParty    []Party                         `json:"associatedParty"`
	Contained          []StudyBaseModel_Contained_Item `json:"contained"`
	Description        string                          `json:"description"`
	DescriptionSummary string                          `json:"descriptionSummary"`
	Period             TimePeriod                      `json:"period"`
	Protocol           []Reference                     `json:"protocol"`
	ResourceType       *StudyBaseModelResourceType     `json:"resourceType,omitempty"`

	// Status An enumeration.
	Status Status `json:"status"`
	Title  string `json:"title"`
}

// StudyBaseModel_Contained_Item defines model for StudyBaseModel.contained.Item.
type StudyBaseModel_Contained_Item struct {
	union json.RawMessage
}

// StudyBaseModelResourceType defines model for StudyBaseModel.ResourceType.
type StudyBaseModelResourceType string

// TelcomItem defines model for TelcomItem.
type TelcomItem struct {
	System string `json:"system"`
	Value  string `json:"value"`
}

// TextItem defines model for TextItem.
type TextItem struct {
	Text string `json:"text"`
}

// TimePeriod defines model for TimePeriod.
type TimePeriod struct {
	End   time.Time `json:"end"`
	Start time.Time `json:"start"`
}

// ValidationError defines model for ValidationError.
type ValidationError struct {
	Loc  []ValidationError_Loc_Item `json:"loc"`
	Msg  string                     `json:"msg"`
	Type string                     `json:"type"`
}

// ValidationErrorLoc0 defines model for .
type ValidationErrorLoc0 = string

// ValidationErrorLoc1 defines model for .
type ValidationErrorLoc1 = int

// ValidationError_Loc_Item defines model for ValidationError.loc.Item.
type ValidationError_Loc_Item struct {
	union json.RawMessage
}

// CreateStudyStudiesPostJSONRequestBody defines body for CreateStudyStudiesPost for application/json ContentType.
type CreateStudyStudiesPostJSONRequestBody = StudyBaseModel

// UpdateStudyStudiesStudyIdPutJSONRequestBody defines body for UpdateStudyStudiesStudyIdPut for application/json ContentType.
type UpdateStudyStudiesStudyIdPutJSONRequestBody = StudyBaseModel

// AsPractitioner returns the union data inside the Study_Contained_Item as a Practitioner
func (t Study_Contained_Item) AsPractitioner() (Practitioner, error) {
	var body Practitioner
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPractitioner overwrites any union data inside the Study_Contained_Item as the provided Practitioner
func (t *Study_Contained_Item) FromPractitioner(v Practitioner) error {
	v.ResourceType = "Practitioner"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePractitioner performs a merge with any union data inside the Study_Contained_Item, using the provided Practitioner
func (t *Study_Contained_Item) MergePractitioner(v Practitioner) error {
	v.ResourceType = "Practitioner"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsOrganization returns the union data inside the Study_Contained_Item as a Organization
func (t Study_Contained_Item) AsOrganization() (Organization, error) {
	var body Organization
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOrganization overwrites any union data inside the Study_Contained_Item as the provided Organization
func (t *Study_Contained_Item) FromOrganization(v Organization) error {
	v.ResourceType = "Organization"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOrganization performs a merge with any union data inside the Study_Contained_Item, using the provided Organization
func (t *Study_Contained_Item) MergeOrganization(v Organization) error {
	v.ResourceType = "Organization"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlanDefinition returns the union data inside the Study_Contained_Item as a PlanDefinition
func (t Study_Contained_Item) AsPlanDefinition() (PlanDefinition, error) {
	var body PlanDefinition
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlanDefinition overwrites any union data inside the Study_Contained_Item as the provided PlanDefinition
func (t *Study_Contained_Item) FromPlanDefinition(v PlanDefinition) error {
	v.ResourceType = "PlanDefinition"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlanDefinition performs a merge with any union data inside the Study_Contained_Item, using the provided PlanDefinition
func (t *Study_Contained_Item) MergePlanDefinition(v PlanDefinition) error {
	v.ResourceType = "PlanDefinition"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Study_Contained_Item) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"resourceType"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Study_Contained_Item) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "Organization":
		return t.AsOrganization()
	case "PlanDefinition":
		return t.AsPlanDefinition()
	case "Practitioner":
		return t.AsPractitioner()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Study_Contained_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Study_Contained_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPractitioner returns the union data inside the StudyBaseModel_Contained_Item as a Practitioner
func (t StudyBaseModel_Contained_Item) AsPractitioner() (Practitioner, error) {
	var body Practitioner
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPractitioner overwrites any union data inside the StudyBaseModel_Contained_Item as the provided Practitioner
func (t *StudyBaseModel_Contained_Item) FromPractitioner(v Practitioner) error {
	v.ResourceType = "Practitioner"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePractitioner performs a merge with any union data inside the StudyBaseModel_Contained_Item, using the provided Practitioner
func (t *StudyBaseModel_Contained_Item) MergePractitioner(v Practitioner) error {
	v.ResourceType = "Practitioner"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsOrganization returns the union data inside the StudyBaseModel_Contained_Item as a Organization
func (t StudyBaseModel_Contained_Item) AsOrganization() (Organization, error) {
	var body Organization
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOrganization overwrites any union data inside the StudyBaseModel_Contained_Item as the provided Organization
func (t *StudyBaseModel_Contained_Item) FromOrganization(v Organization) error {
	v.ResourceType = "Organization"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOrganization performs a merge with any union data inside the StudyBaseModel_Contained_Item, using the provided Organization
func (t *StudyBaseModel_Contained_Item) MergeOrganization(v Organization) error {
	v.ResourceType = "Organization"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlanDefinition returns the union data inside the StudyBaseModel_Contained_Item as a PlanDefinition
func (t StudyBaseModel_Contained_Item) AsPlanDefinition() (PlanDefinition, error) {
	var body PlanDefinition
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlanDefinition overwrites any union data inside the StudyBaseModel_Contained_Item as the provided PlanDefinition
func (t *StudyBaseModel_Contained_Item) FromPlanDefinition(v PlanDefinition) error {
	v.ResourceType = "PlanDefinition"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlanDefinition performs a merge with any union data inside the StudyBaseModel_Contained_Item, using the provided PlanDefinition
func (t *StudyBaseModel_Contained_Item) MergePlanDefinition(v PlanDefinition) error {
	v.ResourceType = "PlanDefinition"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t StudyBaseModel_Contained_Item) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"resourceType"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t StudyBaseModel_Contained_Item) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "Organization":
		return t.AsOrganization()
	case "PlanDefinition":
		return t.AsPlanDefinition()
	case "Practitioner":
		return t.AsPractitioner()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t StudyBaseModel_Contained_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StudyBaseModel_Contained_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsValidationErrorLoc0 returns the union data inside the ValidationError_Loc_Item as a ValidationErrorLoc0
func (t ValidationError_Loc_Item) AsValidationErrorLoc0() (ValidationErrorLoc0, error) {
	var body ValidationErrorLoc0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorLoc0 overwrites any union data inside the ValidationError_Loc_Item as the provided ValidationErrorLoc0
func (t *ValidationError_Loc_Item) FromValidationErrorLoc0(v ValidationErrorLoc0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorLoc0 performs a merge with any union data inside the ValidationError_Loc_Item, using the provided ValidationErrorLoc0
func (t *ValidationError_Loc_Item) MergeValidationErrorLoc0(v ValidationErrorLoc0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsValidationErrorLoc1 returns the union data inside the ValidationError_Loc_Item as a ValidationErrorLoc1
func (t ValidationError_Loc_Item) AsValidationErrorLoc1() (ValidationErrorLoc1, error) {
	var body ValidationErrorLoc1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorLoc1 overwrites any union data inside the ValidationError_Loc_Item as the provided ValidationErrorLoc1
func (t *ValidationError_Loc_Item) FromValidationErrorLoc1(v ValidationErrorLoc1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorLoc1 performs a merge with any union data inside the ValidationError_Loc_Item, using the provided ValidationErrorLoc1
func (t *ValidationError_Loc_Item) MergeValidationErrorLoc1(v ValidationErrorLoc1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t ValidationError_Loc_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ValidationError_Loc_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetStudiesStudiesGet request
	GetStudiesStudiesGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateStudyStudiesPostWithBody request with any body
	CreateStudyStudiesPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateStudyStudiesPost(ctx context.Context, body CreateStudyStudiesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteStudyStudiesStudyIdDelete request
	DeleteStudyStudiesStudyIdDelete(ctx context.Context, studyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateStudyStudiesStudyIdPutWithBody request with any body
	UpdateStudyStudiesStudyIdPutWithBody(ctx context.Context, studyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateStudyStudiesStudyIdPut(ctx context.Context, studyId string, body UpdateStudyStudiesStudyIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetStudiesStudiesGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStudiesStudiesGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateStudyStudiesPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateStudyStudiesPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateStudyStudiesPost(ctx context.Context, body CreateStudyStudiesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateStudyStudiesPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteStudyStudiesStudyIdDelete(ctx context.Context, studyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteStudyStudiesStudyIdDeleteRequest(c.Server, studyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateStudyStudiesStudyIdPutWithBody(ctx context.Context, studyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateStudyStudiesStudyIdPutRequestWithBody(c.Server, studyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateStudyStudiesStudyIdPut(ctx context.Context, studyId string, body UpdateStudyStudiesStudyIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateStudyStudiesStudyIdPutRequest(c.Server, studyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetStudiesStudiesGetRequest generates requests for GetStudiesStudiesGet
func NewGetStudiesStudiesGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/studies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateStudyStudiesPostRequest calls the generic CreateStudyStudiesPost builder with application/json body
func NewCreateStudyStudiesPostRequest(server string, body CreateStudyStudiesPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateStudyStudiesPostRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateStudyStudiesPostRequestWithBody generates requests for CreateStudyStudiesPost with any type of body
func NewCreateStudyStudiesPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/studies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteStudyStudiesStudyIdDeleteRequest generates requests for DeleteStudyStudiesStudyIdDelete
func NewDeleteStudyStudiesStudyIdDeleteRequest(server string, studyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "study_id", runtime.ParamLocationPath, studyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/studies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateStudyStudiesStudyIdPutRequest calls the generic UpdateStudyStudiesStudyIdPut builder with application/json body
func NewUpdateStudyStudiesStudyIdPutRequest(server string, studyId string, body UpdateStudyStudiesStudyIdPutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateStudyStudiesStudyIdPutRequestWithBody(server, studyId, "application/json", bodyReader)
}

// NewUpdateStudyStudiesStudyIdPutRequestWithBody generates requests for UpdateStudyStudiesStudyIdPut with any type of body
func NewUpdateStudyStudiesStudyIdPutRequestWithBody(server string, studyId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "study_id", runtime.ParamLocationPath, studyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/studies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetStudiesStudiesGetWithResponse request
	GetStudiesStudiesGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStudiesStudiesGetResponse, error)

	// CreateStudyStudiesPostWithBodyWithResponse request with any body
	CreateStudyStudiesPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStudyStudiesPostResponse, error)

	CreateStudyStudiesPostWithResponse(ctx context.Context, body CreateStudyStudiesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateStudyStudiesPostResponse, error)

	// DeleteStudyStudiesStudyIdDeleteWithResponse request
	DeleteStudyStudiesStudyIdDeleteWithResponse(ctx context.Context, studyId string, reqEditors ...RequestEditorFn) (*DeleteStudyStudiesStudyIdDeleteResponse, error)

	// UpdateStudyStudiesStudyIdPutWithBodyWithResponse request with any body
	UpdateStudyStudiesStudyIdPutWithBodyWithResponse(ctx context.Context, studyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateStudyStudiesStudyIdPutResponse, error)

	UpdateStudyStudiesStudyIdPutWithResponse(ctx context.Context, studyId string, body UpdateStudyStudiesStudyIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateStudyStudiesStudyIdPutResponse, error)
}

type GetStudiesStudiesGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Study
}

// Status returns HTTPResponse.Status
func (r GetStudiesStudiesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStudiesStudiesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateStudyStudiesPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Study
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r CreateStudyStudiesPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateStudyStudiesPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteStudyStudiesStudyIdDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r DeleteStudyStudiesStudyIdDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteStudyStudiesStudyIdDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateStudyStudiesStudyIdPutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Study
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r UpdateStudyStudiesStudyIdPutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateStudyStudiesStudyIdPutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetStudiesStudiesGetWithResponse request returning *GetStudiesStudiesGetResponse
func (c *ClientWithResponses) GetStudiesStudiesGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStudiesStudiesGetResponse, error) {
	rsp, err := c.GetStudiesStudiesGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStudiesStudiesGetResponse(rsp)
}

// CreateStudyStudiesPostWithBodyWithResponse request with arbitrary body returning *CreateStudyStudiesPostResponse
func (c *ClientWithResponses) CreateStudyStudiesPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStudyStudiesPostResponse, error) {
	rsp, err := c.CreateStudyStudiesPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateStudyStudiesPostResponse(rsp)
}

func (c *ClientWithResponses) CreateStudyStudiesPostWithResponse(ctx context.Context, body CreateStudyStudiesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateStudyStudiesPostResponse, error) {
	rsp, err := c.CreateStudyStudiesPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateStudyStudiesPostResponse(rsp)
}

// DeleteStudyStudiesStudyIdDeleteWithResponse request returning *DeleteStudyStudiesStudyIdDeleteResponse
func (c *ClientWithResponses) DeleteStudyStudiesStudyIdDeleteWithResponse(ctx context.Context, studyId string, reqEditors ...RequestEditorFn) (*DeleteStudyStudiesStudyIdDeleteResponse, error) {
	rsp, err := c.DeleteStudyStudiesStudyIdDelete(ctx, studyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteStudyStudiesStudyIdDeleteResponse(rsp)
}

// UpdateStudyStudiesStudyIdPutWithBodyWithResponse request with arbitrary body returning *UpdateStudyStudiesStudyIdPutResponse
func (c *ClientWithResponses) UpdateStudyStudiesStudyIdPutWithBodyWithResponse(ctx context.Context, studyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateStudyStudiesStudyIdPutResponse, error) {
	rsp, err := c.UpdateStudyStudiesStudyIdPutWithBody(ctx, studyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateStudyStudiesStudyIdPutResponse(rsp)
}

func (c *ClientWithResponses) UpdateStudyStudiesStudyIdPutWithResponse(ctx context.Context, studyId string, body UpdateStudyStudiesStudyIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateStudyStudiesStudyIdPutResponse, error) {
	rsp, err := c.UpdateStudyStudiesStudyIdPut(ctx, studyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateStudyStudiesStudyIdPutResponse(rsp)
}

// ParseGetStudiesStudiesGetResponse parses an HTTP response from a GetStudiesStudiesGetWithResponse call
func ParseGetStudiesStudiesGetResponse(rsp *http.Response) (*GetStudiesStudiesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStudiesStudiesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Study
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateStudyStudiesPostResponse parses an HTTP response from a CreateStudyStudiesPostWithResponse call
func ParseCreateStudyStudiesPostResponse(rsp *http.Response) (*CreateStudyStudiesPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateStudyStudiesPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Study
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteStudyStudiesStudyIdDeleteResponse parses an HTTP response from a DeleteStudyStudiesStudyIdDeleteWithResponse call
func ParseDeleteStudyStudiesStudyIdDeleteResponse(rsp *http.Response) (*DeleteStudyStudiesStudyIdDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteStudyStudiesStudyIdDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseUpdateStudyStudiesStudyIdPutResponse parses an HTTP response from a UpdateStudyStudiesStudyIdPutWithResponse call
func ParseUpdateStudyStudiesStudyIdPutResponse(rsp *http.Response) (*UpdateStudyStudiesStudyIdPutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateStudyStudiesStudyIdPutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Study
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}
